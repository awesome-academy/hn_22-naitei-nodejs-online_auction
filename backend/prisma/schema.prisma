// Prisma schema file
// Docs: https://pris.ly/d/prisma-schema
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  BIDDER
  SELLER
}

model User {
  userId                     String    @id @default(uuid()) @map("user_id") @db.Char(36)
  email                      String    @unique @db.VarChar(255)
  password                   String    @db.VarChar(255)
  role                       Role
  isBanned                   Boolean   @default(false) @map("is_banned")
  isVerified                 Boolean   @default(false) @map("is_verified")
  verificationToken          String?   @map("verification_token") @db.VarChar(255)
  verificationTokenExpiresAt DateTime? @map("verification_token_expires_at") @db.Timestamp(0)
  createdAt                  DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt                  DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)

  warnings      Warning[] @relation("UserWarnings")
  adminWarnings Warning[] @relation("AdminWarnings")
  warningCount  Int       @default(0)

  followings Follow[] @relation("Users_Follow_Sellers")
  followers  Follow[] @relation("Sellers_FollowedBy_Users")

  profile Profile? @relation("User_Has_Profile")

  addresses Address[] @relation("User_Has_Addresses")

  products Product[] @relation("Seller_Sell_Products")

  createdAuctions Auction[] @relation("Seller_Creates_Auctions")

  auctions Auction[] @relation("User_Wins_Auctions")

  bid Bid[] @relation("User_Has_Bids")

  walletBalance      Decimal             @default(0) @map("wallet_balance") @db.Decimal(19, 4)
  walletTransactions WalletTransaction[] @relation("User_Has_WalletTransactions")

  sentMessages     Message[]  @relation("UserSentMessages")
  chatRoomsAsUser1 ChatRoom[] @relation("User1ChatRooms")
  chatRoomsAsUser2 ChatRoom[] @relation("User2ChatRooms")

  watchlist Watchlist[] @relation("User_Has_Watchlist")

  notifications   Notification[]   @relation("UserNotifications")
  orders          Order[]          @relation("User_Has_Orders")
  productComments ProductComment[] @relation("User_Has_ProductComments")
  auctionComments AuctionComment[] @relation("User_Has_AuctionComments")

  // Report relations
  reportedComments CommentReport[] @relation("User_Reports_Comments")
  reviewedReports  CommentReport[] @relation("Admin_Reviews_Reports")

  sellerShippings Shipping[] @relation("Seller_Ships_Orders")
  buyerShippings  Shipping[] @relation("Buyer_Receives_Shipments")

  @@map("users")
}

enum TransactionType {
  DEPOSIT // Nạp tiền
  WITHDRAWAL // Rút tiền
  BID_PAYMENT // Thanh toán đặt cược
  BID_REFUND // Hoàn tiền khi thua cuộc
  AUCTION_PAYMENT // Thanh toán khi thắng auction
  ADMIN_ADJUSTMENT // Điều chỉnh từ admin
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

// Bảng giao dịch ví
model WalletTransaction {
  transactionId String @id @default(uuid()) @map("transaction_id") @db.Char(36)

  userId String @map("user_id") @db.Char(36)
  user   User   @relation("User_Has_WalletTransactions", fields: [userId], references: [userId], onDelete: Cascade)

  type   TransactionType   @map("transaction_type")
  status TransactionStatus @map("transaction_status")

  // Số tiền giao dịch
  amount Decimal @map("amount") @db.Decimal(19, 4)

  // Số dư sau giao dịch
  balanceAfter Decimal @map("balance_after") @db.Decimal(19, 4)

  // Reference đến auction/bid nếu có
  auctionId String?  @map("auction_id") @db.Char(36)
  auction   Auction? @relation("Auction_WalletTransactions", fields: [auctionId], references: [auctionId], onDelete: SetNull)

  bidId String? @unique @map("bid_id") @db.Char(36)
  bid   Bid?    @relation("Bid_WalletTransaction", fields: [bidId], references: [bidId], onDelete: SetNull)

  description String? @db.Text

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("wallet_transactions")
}

model Warning {
  warningId   String   @id @default(uuid())
  userId      String
  adminId     String
  reason      String
  description String?
  createdAt   DateTime @default(now())

  user  User @relation("UserWarnings", fields: [userId], references: [userId], onDelete: Cascade)
  admin User @relation("AdminWarnings", fields: [adminId], references: [userId])

  @@map("warnings")
}

model Follow {
  followId String @id @default(uuid()) @map("follow_id") @db.Char(36)

  followerId String @map("follower_id") @db.Char(36)
  follower   User   @relation("Users_Follow_Sellers", fields: [followerId], references: [userId], onDelete: Cascade)

  sellerId String @map("seller_id") @db.Char(36)
  seller   User   @relation("Sellers_FollowedBy_Users", fields: [sellerId], references: [userId], onDelete: Cascade)

  followedAt DateTime @default(now()) @map("followed_at") @db.Timestamp(0)

  @@unique([followerId, sellerId])
  @@map("follows")
}

model Profile {
  userId String @id @map("user_id") @db.Char(36)
  user   User   @relation("User_Has_Profile", fields: [userId], references: [userId], onDelete: Cascade)

  fullName        String?   @map("full_name") @db.VarChar(255)
  phoneNumber     String?   @map("phone_number") @db.VarChar(255)
  profileImageUrl String?   @map("profile_image_url") @db.VarChar(255)
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("profiles")
}

enum AddressType {
  Home
  Work
  Others
}

model Address {
  addressId String @id @default(uuid()) @map("address_id") @db.Char(36)

  userId String @map("user_id") @db.Char(36)
  user   User   @relation("User_Has_Addresses", fields: [userId], references: [userId], onDelete: Cascade)

  streetAddress String      @map("street_address") @db.VarChar(255)
  city          String      @db.VarChar(255)
  state         String?     @db.VarChar(255)
  postalCode    String?     @map("postal_code") @db.VarChar(255)
  country       String      @db.VarChar(255)
  addressType   AddressType @map("address_type")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime    @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("addresses")
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  SOLD
  REMOVED
  DELETING
}

model Product {
  productId   String  @id @default(uuid()) @map("product_id") @db.Char(36)
  name        String  @db.VarChar(255)
  description String? @db.Text

  sellerId String @map("seller_id") @db.Char(36)
  seller   User   @relation("Seller_Sell_Products", fields: [sellerId], references: [userId], onDelete: Cascade)

  status        ProductStatus @default(INACTIVE)
  stockQuantity Int           @default(0) @map("stock_quantity")
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime      @updatedAt @map("updated_at") @db.Timestamp(0)

  productCategories ProductCategory[] @relation("Products_Have_Categories")

  images ProductImage[] @relation("Product_Has_Images")

  auctionProducts AuctionProduct[] @relation("Product_In_Auctions")

  comments ProductComment[] @relation("Product_Has_Comments")

  @@map("products")
}

enum CategoryType {
  ELECTRONICS
  FASHION
  COLLECTIBLES
  HOME_APPLIANCES
  SPORTS_EQUIPMENT
  TOYS_AND_GAMES
  VEHICLES
  REAL_ESTATE
  ART_AND_CRAFTS
  JEWELRY_AND_ACCESSORIES
  HEALTH_AND_BEAUTY
  GARDEN_AND_OUTDOORS
  MUSIC_INSTRUMENTS
  PET_SUPPLIES
  OFFICE_SUPPLIES
}

model Category {
  categoryId String       @id @default(uuid()) @map("category_id") @db.Char(36)
  name       CategoryType
  createdAt  DateTime     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime     @updatedAt @map("updated_at") @db.Timestamp(0)

  productCategories ProductCategory[] @relation("Categories_Contain_Products")

  @@map("categories")
}

model ProductCategory {
  productId String  @map("product_id") @db.Char(36)
  product   Product @relation("Products_Have_Categories", fields: [productId], references: [productId], onDelete: Cascade)

  categoryId String   @map("category_id") @db.Char(36)
  category   Category @relation("Categories_Contain_Products", fields: [categoryId], references: [categoryId], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("products_categories")
}

model ProductImage {
  imageId String @id @default(uuid()) @map("product_image_id") @db.Char(36)

  productId String  @map("product_id") @db.Char(36)
  product   Product @relation("Product_Has_Images", fields: [productId], references: [productId], onDelete: Cascade)

  imageUrl  String   @map("image_url") @db.VarChar(255)
  isPrimary Boolean  @default(false) @map("is_primary")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  @@map("product_images")
}

enum AuctionStatus {
  PENDING
  READY
  OPEN
  CLOSED
  CANCELED
  COMPLETED
  EXTENDED
  REFUND
}

model Auction {
  auctionId String @id @default(uuid()) @map("auction_id") @db.Char(36)
  title     String @db.VarChar(255)
  imageUrl  String @map("image_url") @db.VarChar(255)
  sellerId  String @map("seller_id") @db.Char(36)
  seller    User   @relation("Seller_Creates_Auctions", fields: [sellerId], references: [userId], onDelete: Cascade)

  auctionProducts AuctionProduct[] @relation("Auction_Has_Products")

  startTime     DateTime @map("start_time") @db.Timestamp(0)
  endTime       DateTime @map("end_time") @db.Timestamp(0)
  currentPrice  Decimal  @map("current_price") @db.Decimal(10, 2)
  startingPrice Decimal  @map("starting_price") @db.Decimal(10, 2)

  winnerId String? @map("winner_id") @db.Char(36)
  winner   User?   @relation("User_Wins_Auctions", fields: [winnerId], references: [userId], onDelete: SetNull)

  status              AuctionStatus @default(PENDING)
  cancelReason        String?       @map("cancel_reason") @db.Text
  minimumBidIncrement Decimal       @map("minimum_bid_increment") @db.Decimal(10, 2)
  lastBidTime         DateTime      @map("last_bid_time") @db.Timestamp(0)
  bidCount            BigInt        @default(0) @map("bid_count")
  createdAt           DateTime      @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt           DateTime      @updatedAt @map("updated_at") @db.Timestamp(0)

  bids Bid[] @relation("Auction_Has_Bids")

  walletTransactions WalletTransaction[] @relation("Auction_WalletTransactions")

  watchlist Watchlist[] @relation("Auction_In_Watchlist")

  orders Order[] @relation("Auction_Has_Orders")

  shippings Shipping[] @relation("Auction_Has_Shipping")

  comments AuctionComment[] @relation("Auction_Has_Comments")

  @@map("auctions")
}

model AuctionProduct {
  id String @id @default(uuid()) @map("auction_product_id") @db.Char(36)

  auctionId String  @map("auction_id") @db.Char(36)
  auction   Auction @relation("Auction_Has_Products", fields: [auctionId], references: [auctionId], onDelete: Cascade)

  productId String  @map("product_id") @db.Char(36)
  product   Product @relation("Product_In_Auctions", fields: [productId], references: [productId], onDelete: Cascade)

  quantity Int @default(1) @db.Int

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  @@unique([auctionId, productId])
  @@map("auction_products")
}

enum BidStatus {
  PENDING
  VALID
  INVALID
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPING
  COMPLETED
  CANCELED
}

enum ShippingStatus {
  PENDING
  SHIPPED
  IN_TRANSIT
  DELIVERED
}

model Bid {
  bidId String @id @default(uuid()) @map("bid_id") @db.Char(36)

  auctionId String  @map("auction_id") @db.Char(36)
  auction   Auction @relation("Auction_Has_Bids", fields: [auctionId], references: [auctionId], onDelete: Cascade)

  userId String @map("user_id") @db.Char(36)
  user   User   @relation("User_Has_Bids", fields: [userId], references: [userId], onDelete: Cascade)

  bidAmount Decimal @map("bid_amount") @db.Decimal(19, 4)

  walletTransaction WalletTransaction? @relation("Bid_WalletTransaction")

  isHidden Boolean @default(false) // để đánh dấu bid trong nước rút

  status    BidStatus
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)

  @@map("bids")
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

model ChatRoom {
  chatRoomId String @id @default(uuid()) @map("chat_room_id") @db.Char(36)

  user1Id String @map("user1_id") @db.Char(36)
  user1   User   @relation("User1ChatRooms", fields: [user1Id], references: [userId], onDelete: Cascade)

  user2Id String @map("user2_id") @db.Char(36)
  user2   User   @relation("User2ChatRooms", fields: [user2Id], references: [userId], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  messages Message[] @relation("ChatRoom_Has_Messages")

  deletedByUser1 Boolean   @default(false) @map("deleted_by_user1")
  deletedByUser2 Boolean   @default(false) @map("deleted_by_user2")
  user1DeletedAt DateTime? @map("user1_deleted_at") @db.Timestamp(0)
  user2DeletedAt DateTime? @map("user2_deleted_at") @db.Timestamp(0)

  @@unique([user1Id, user2Id])
  @@map("chat_rooms")
}

model Message {
  messageId String @id @default(uuid()) @map("message_id") @db.Char(36)

  chatRoomId String   @map("chat_room_id") @db.Char(36)
  chatRoom   ChatRoom @relation("ChatRoom_Has_Messages", fields: [chatRoomId], references: [chatRoomId], onDelete: Cascade)

  senderId String @map("sender_id") @db.Char(36)
  sender   User   @relation("UserSentMessages", fields: [senderId], references: [userId], onDelete: Cascade)

  content String? @db.Text
  fileUrl String? @map("file_url") @db.VarChar(255)

  type   MessageType   @default(TEXT)
  status MessageStatus @default(SENT)

  timestamp DateTime @default(now()) @db.Timestamp(0)
  version   Int      @default(0)

  @@map("messages")
}

model Watchlist {
  watchlistId String @id @default(uuid()) @map("watchlist_id") @db.Char(36)

  userId String @map("user_id") @db.Char(36)
  user   User   @relation("User_Has_Watchlist", fields: [userId], references: [userId], onDelete: Cascade)

  auctionId String  @map("auction_id") @db.Char(36)
  auction   Auction @relation("Auction_In_Watchlist", fields: [auctionId], references: [auctionId], onDelete: Cascade)

  addedAt DateTime @default(now()) @map("added_at") @db.Timestamp(0)

  @@unique([userId, auctionId])
  @@map("watchlists")
}

model Notification {
  notificationId String  @id @default(uuid()) @map("notification_id") @db.Char(36)
  message        String  @db.Text
  isRead         Boolean @default(false) @map("is_read")

  userId String @map("user_id") @db.Char(36)
  user   User   @relation("UserNotifications", fields: [userId], references: [userId], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  metadata  Json?    @db.Json

  @@map("notifications")
}

model ProductComment {
  commentId String @id @default(uuid()) @map("comment_id") @db.Char(36)

  productId String  @map("product_id") @db.Char(36)
  product   Product @relation("Product_Has_Comments", fields: [productId], references: [productId], onDelete: Cascade)

  userId String @map("user_id") @db.Char(36)
  user   User   @relation("User_Has_ProductComments", fields: [userId], references: [userId], onDelete: Cascade)

  content String @db.Text
  rating  Int?   @db.Int // Rating from 1-5 stars (optional)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("product_comments")
}

model AuctionComment {
  commentId String @id @default(uuid()) @map("comment_id") @db.Char(36)

  auctionId String  @map("auction_id") @db.Char(36)
  auction   Auction @relation("Auction_Has_Comments", fields: [auctionId], references: [auctionId], onDelete: Cascade)

  userId String @map("user_id") @db.Char(36)
  user   User   @relation("User_Has_AuctionComments", fields: [userId], references: [userId], onDelete: Cascade)

  content String @db.Text

  // Report related fields
  isHidden    Boolean @default(false) @map("is_hidden")
  reportCount Int     @default(0) @map("report_count")

  reports CommentReport[] @relation("Comment_Has_Reports")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("auction_comments")
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

enum ReportType {
  INAPPROPRIATE_LANGUAGE
  SPAM
  HARASSMENT
  UNRELATED_CONTENT
  OTHER
}

model CommentReport {
  reportId String @id @default(uuid()) @map("report_id") @db.Char(36)

  commentId String         @map("comment_id") @db.Char(36)
  comment   AuctionComment @relation("Comment_Has_Reports", fields: [commentId], references: [commentId], onDelete: Cascade)

  reporterId String @map("reporter_id") @db.Char(36)
  reporter   User   @relation("User_Reports_Comments", fields: [reporterId], references: [userId], onDelete: Cascade)

  type   ReportType   @map("report_type")
  reason String       @db.Text
  status ReportStatus @default(PENDING)

  // Admin who handles the report
  reviewerId String? @map("reviewer_id") @db.Char(36)
  reviewer   User?   @relation("Admin_Reviews_Reports", fields: [reviewerId], references: [userId], onDelete: SetNull)

  reviewedAt DateTime? @map("reviewed_at") @db.Timestamp(0)
  adminNote  String?   @map("admin_note") @db.Text

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  // Unique constraint to prevent duplicate reports from same user on same comment
  @@unique([commentId, reporterId])
  @@map("comment_reports")
}

model Order {
  orderId String @id @default(uuid()) @map("id") @db.Char(36)

  userId String @map("user_id") @db.Char(36)
  user   User   @relation("User_Has_Orders", fields: [userId], references: [userId], onDelete: Cascade)

  auctionId String  @map("auction_id") @db.Char(36)
  auction   Auction @relation("Auction_Has_Orders", fields: [auctionId], references: [auctionId], onDelete: Cascade)

  totalAmount    Decimal     @map("total_amount") @db.Decimal(19, 4)
  status         OrderStatus @default(PENDING)
  paymentDueDate DateTime?   @map("payment_due_date") @db.Timestamp(0)
  createdAt      DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime    @updatedAt @map("updated_at") @db.Timestamp(0)

  shipping Shipping? @relation("Order_Has_Shipping")

  // Ensure one order per user per auction
  @@unique([userId, auctionId])
  @@map("orders")
}

model Shipping {
  id String @id @default(uuid()) @db.Char(36)

  orderId String? @unique @map("order_id") @db.Char(36)
  order   Order?  @relation("Order_Has_Shipping", fields: [orderId], references: [orderId], onDelete: Cascade)

  auctionId String  @map("auction_id") @db.Char(36)
  auction   Auction @relation("Auction_Has_Shipping", fields: [auctionId], references: [auctionId], onDelete: Cascade)

  sellerId String @map("seller_id") @db.Char(36)
  seller   User   @relation("Seller_Ships_Orders", fields: [sellerId], references: [userId], onDelete: Cascade)

  buyerId String @map("buyer_id") @db.Char(36)
  buyer   User   @relation("Buyer_Receives_Shipments", fields: [buyerId], references: [userId], onDelete: Cascade)

  shippingStatus    ShippingStatus @default(PENDING) @map("shipping_status")
  price             Decimal?       @db.Decimal(19, 4)
  trackingNumber    String?        @map("tracking_number") @db.VarChar(100)
  shippedAt         DateTime?      @map("shipped_at") @db.Timestamp(0)
  estimatedDelivery DateTime?      @map("estimated_delivery") @db.Timestamp(0)
  actualDelivery    DateTime?      @map("actual_delivery") @db.Timestamp(0)
  createdAt         DateTime       @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt         DateTime       @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("shippings")
}
